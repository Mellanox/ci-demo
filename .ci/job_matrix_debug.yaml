---
job: ci-demo

registry_host: harbor.mellanox.com
registry_path: /swx-storage/ci-demo
registry_auth: swx-storage

kubernetes:
  cloud: swx-k8s
  arch_table:
    x86_64:
      nodeSelector: 'kubernetes.io/arch=amd64'
      jnlpImage: 'jenkins/inbound-agent:latest'
    aarch64:
      nodeSelector: 'kubernetes.io/arch=arm64'
      jnlpImage: '${registry_host}/${registry_jnlp_path}/jenkins-arm-agent-jnlp:latest'




volumes:
  - {mountPath: /hpc/local, hostPath: /hpc/local}
  - {mountPath: /auto/sw_tools, hostPath: /auto/sw_tools}
  - {mountPath: /.autodirect/mtrswgwork, hostPath: /.autodirect/mtrswgwork}
  - {mountPath: /.autodirect/sw/release, hostPath: /.autodirect/sw/release}

env:
  mofed_installer_exe: /.autodirect/sw/release/mlnx_ofed/MLNX_OFED/mlnx_ofed_install
  mofed_installer_opt: --user-space-only --without-fw-update --all -q --skip-unsupported-devices-check

runs_on_dockers:
#  - {file: '.ci/Dockerfile.ubuntu16-4', name: 'ubuntu16-4', tag: 'latest', arch: 'x86_64', nodeLabel: '(dockerserver || docker) && x86_64'}
  - {file: '.ci/Dockerfile.centos7.7.1908', name: 'centos7-7', tag: 'latest', arch: 'x86_64'}
  - {file: '.ci/Dockerfile.ubuntu16-4', name: 'ubuntu16-4', tag: 'latest', arch: 'x86_64'}
 

matrix_disabled:
  axes:
    driver:
      - MLNX_OFED_LINUX-4.9-0.1.8.0
      - MLNX_OFED_LINUX-5.1-1.0.0.0
    cuda:
      - dev/cuda9.2
      - dev/cuda9.3
      - dev/cuda9.4
      - dev/cuda9.5
    arch:
      - x86_64

steps:
  - name: step1
    run: touch aaa

  - name: step2
    run: ls -al aaa
    parallel: true

  - name: step3
    run: ls -al aaa
    parallel: true

  - name: step4
    run: rm aaa


steps_disabled:

  - name: Test failure
    run: |
      echo going to fail no
      exit 1
      echo should not see it

  - name: after failure
    run: |
      echo should not see it either

  - name: Check bash shell
    shell: '#!/bin/bash -eE'
    run: type ls

  - name: Check python shell
    shell: '#!/usr/bin/env python'
    run: |
      print('Hello World!')

  - name: Generate failures
    run: |
      env > myenv.log
      exit 1
    onfail: env > onfail_myenv.log
    always: env > always_myenv.log
    archiveArtifacts: 'onfail_myenv.log,always_myenv.log'


#shell: '#!/bin/bash -eEx'

pipeline_start:
  run: echo Starting new job

pipeline_stop:
  run: echo All done

archiveArtifacts: myenv.log
failFast: false
#batchSize: 2
#timeout_minutes: 2
#taskName: '${name}/${axis_index}'
